- hosts: web
  become: true
  tasks:
    - name: Ensure app directory exists
      file:
        path: /home/ubuntu/app/blog
        state: directory

    - name: Copy .env.prod to .env
      shell: cp /home/ubuntu/app/blog/.env.prod /home/ubuntu/app/blog/.env

    - import_tasks: tasks/docker_log_backup.yml

    - name: Stop existing container
      shell: docker rm -f blog || true

    - name: Remove old blog images (keep latest 2)
      shell: |
        docker images blog -q | tail -n +3 | xargs -r docker rmi -f || true

    - name: Clean up dangling images
      shell: docker image prune -f

    - name: Generate timestamp
      shell: date +%Y%m%d_%H%M%S
      register: timestamp_output

    - name: Set timestamp variable
      set_fact:
        blog_timestamp: "{{ timestamp_output.stdout }}"

    - name: Debug - Show timestamp
      debug:
        msg: "Building image with tag: blog:{{ blog_timestamp }}"

    - name: Build Docker image with timestamp tag
      shell: |
        cd /home/ubuntu/app/blog
        echo "Starting Docker build..."
        DOCKER_BUILDKIT=1 docker build -t blog:{{ blog_timestamp }} . > /tmp/docker-build.log 2>&1
      register: build_result
      ignore_errors: yes
      async: 900 
      poll: 10

    - name: Get previous blog image tag (lastest second image)
      shell: docker images blog --format '{{ "{{.Tag}}" }}' | sed -n '2p'
      register: previous_image_tag

    - name: Rollback to previous image if build failed
      shell: |
        docker run -d \
          --name blog \
          --restart always \
          -p 3000:3000 \
          -v /home/ubuntu/app/blog/.env:/app/.env \
          blog:{{ previous_image_tag.stdout }}
      when: build_result is failed

    - name: Debug - Show build output
      debug:
        var: build_result

    - name: Verify image was built successfully
      shell: docker images blog:{{ blog_timestamp }} --quiet
      register: image_check
      failed_when: image_check.stdout == ""

    - name: Run new container
      shell: |
        docker run -d \
          --name blog \
          --restart always \
          -p 3000:3000 \
          -v /home/ubuntu/app/blog/.env:/app/.env \
          blog:{{ blog_timestamp }}
      register: container_result

    - name: Wait for server to be up (health check)
      shell: |
        for i in {1..30}; do
          STATUS=$(curl -sk -o /dev/null -w "%{http_code}" https://mogumogu.dev/api/status)
          if [ "$STATUS" = "200" ]; then
            echo "✅ Server is UP!"
            exit 0
          fi
          echo "⏳ Waiting for server... ($i/30, status: $STATUS)"
          sleep 3
        done
        echo "❌ Server didn't respond after 90 seconds."
        exit 1
      register: health_check
      retries: 1
      delay: 0
      ignore_errors: no

    - name: Debug - Show container run result
      debug:
        var: container_result.stdout_lines

    - name: Get running container info
      shell: docker ps --filter "name=blog" --format '{{ "{{.Image}}" }}'
      register: running_container_image

    - name: Verify container is using correct image
      assert:
        that:
          - running_container_image.stdout == "blog:" + blog_timestamp
        fail_msg: "Container is running wrong image! Expected: blog:{{ blog_timestamp }}, Got: {{ running_container_image.stdout }}"
        success_msg: "✅ Container is running correct image: blog:{{ blog_timestamp }}"

    - name: Check container health
      shell: docker ps --filter "name=blog" --format '{{ "{{.Status}}" }}'
      register: container_status

    - name: Verify container is running
      assert:
        that:
          - "'Up' in container_status.stdout"
        fail_msg: "❌ Container is not running! Status: {{ container_status.stdout }}"
        success_msg: "✅ Container is running successfully"

    - name: Final deployment summary
      debug:
        msg: |
          🎉 Deployment completed successfully!
          📦 Image: blog:{{ blog_timestamp }}
          🐳 Container: blog
          📊 Status: {{ container_status.stdout }}
          🌐 Port: 3000

    - name: Show final container and image info
      shell: |
        echo "=== RUNNING CONTAINERS ==="
        docker ps --format 'table {{ "{{.Names}}" }}\t{{ "{{.Image}}" }}\t{{ "{{.Status}}" }}\t{{ "{{.Ports}}" }}'
        echo ""
        echo "=== BLOG IMAGES ==="
        docker images blog --format 'table {{ "{{.Repository}}" }}\t{{ "{{.Tag}}" }}\t{{ "{{.CreatedAt}}" }}\t{{ "{{.Size}}" }}'
      register: final_status

    - name: Display final status
      debug:
        var: final_status.stdout_lines