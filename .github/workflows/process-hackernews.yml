name: Process HackerNews

on:
  schedule:
    - cron: "00 16 * * *" # KST (UTC+9) 01:00
  workflow_dispatch:

jobs:
  run-tasks:
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
      HACKERNEWS_API_KEY: ${{ secrets.HACKERNEWS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq awscli

      - name: Turn on Redis (Fargate)
        run: |
          aws ecs update-service \
            --cluster mogumogu \
            --service mogumogu-service-dr9p94qm \
            --desired-count 1
          echo "⏳ Waiting for Redis task to start..."
          sleep 30

      - name: Get Redis private IP
        id: get_private_redis_ip
        run: |
          REDIS_IP=$(aws ecs describe-tasks \
            --cluster mogumogu \
            --tasks $(aws ecs list-tasks --cluster mogumogu \
              --service-name mogumogu-service-dr9p94qm \
              --desired-status RUNNING \
              --query 'taskArns[0]' --output text) \
            --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' \
            --output text)
          echo "Redis IP is $REDIS_IP"
          echo "REDIS_HOST=$REDIS_IP" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV

      - name: Get Redis public IP
        id: get_public_redis_ip
        run: |
          TASK_ARN=$(aws ecs list-tasks \
            --cluster mogumogu \
            --service-name mogumogu-service-dr9p94qm \
            --desired-status RUNNING \
            --query 'taskArns[0]' --output text)
          ENI_ID=$(aws ecs describe-tasks \
            --cluster mogumogu \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
          echo "Public IP: $PUBLIC_IP"

      - name: Print Redis env (for debugging)
        run: echo "REDIS_HOST=$REDIS_HOST, REDIS_PORT=$REDIS_PORT"

      - name: Create SSH key file
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > /tmp/ci-key.pem
          chmod 600 /tmp/ci-key.pem

      - name: Replace Redis value in .env.prod using Ansible
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/replace-env.yml
          directory: .
          inventory: |
            [web]
            ec2-snstance ansible_host=${{ secrets.AWS_EC2_HOST }} ansible_user=ubuntu ansible_ssh_private_key_file=/tmp/ci-key.pem
        env:
          REDIS_HOST: ${{ env.REDIS_HOST }}
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Fetch HackerNews contents list
        run: |
          RESPONSE=$(curl -s -X GET https://mogumogu.dev/api/hackernews \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}")
          echo "$RESPONSE"

      - name: Fetch HackerNews contents
        run: |
          RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/fetch \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}")
          echo "$RESPONSE"

      - name: Wait for Redis key change after fetch
        run: |
          INITIAL_COUNT=$(curl -s https://mogumogu.dev/api/hackernews/redis/count | jq '.keyCount')
          echo "Initial Redis key count: $INITIAL_COUNT"
          PREV_COUNT=$INITIAL_COUNT

          for i in {1..10}; do
            sleep 60
            CUR_COUNT=$(curl -s https://mogumogu.dev/api/hackernews/redis/count | jq '.keyCount')
            echo "[$i/10] Current Redis key count: $CUR_COUNT"

            if [ "$CUR_COUNT" -gt "$PREV_COUNT" ]; then
              echo "Redis key count increased. Waiting for stabilization..."
              PREV_COUNT=$CUR_COUNT
              continue
            fi

            if [ "$CUR_COUNT" = "$PREV_COUNT" ]; then
              echo "No change in Redis key count detected for 1 minute."
              echo "FETCH_TOTAL=$CUR_COUNT" >> $GITHUB_ENV
              exit 0
            fi
          done

          echo "Redis key count monitoring completed."
          echo "FETCH_TOTAL=$CUR_COUNT" >> $GITHUB_ENV

      - name: Fetch HackerNews contents - Flush
        id: fetch-flush
        run: |
          RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/flush \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}" \
            -d "{\"type\": \"fetch\", \"total\": $FETCH_TOTAL}")
          echo "$RESPONSE"
          FLUSHED=$(echo "$RESPONSE" | jq '.flushed')
          if [ "$FLUSHED" -ge 1 ]; then
            echo "Flush succeeded!"
            exit 0
          else
            echo "Flush failed or no eligible items to flush."
            exit 1
          fi

      - name: Summarize HackerNews content
        run: |
          RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/summarize \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}")
          echo "$RESPONSE"
          SUMMARIZE_TOTAL=$(echo "$RESPONSE" | jq '.total')
          echo "SUMMARIZE_TOTAL=$SUMMARIZE_TOTAL" >> $GITHUB_ENV

      - name: Summarize HackerNews content - Flush
        id: summarize-flush
        run: |
          for i in {1..5}; do
            RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/flush \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}" \
              -d "{\"type\": \"summarize\", \"total\": $SUMMARIZE_TOTAL}")
            echo "$RESPONSE"
            FLUSHED=$(echo "$RESPONSE" | jq '.flushed')
            if [ "$FLUSHED" -ge 1 ]; then
              echo "Summarize flush succeeded!"
              exit 0
            fi
            echo "Summarize flush not ready, retrying in 60s..."
            sleep 60
          done
          echo "Summarize flush failed after 5 attempts"
          exit 1

      - name: Translate HackerNews to Korean
        run: |
          RESPONSE=$(curl -s -X POST "https://mogumogu.dev/api/hackernews/translate?lang=ko" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}")
          echo "$RESPONSE"
          TRANSLATE_KO_TOTAL=$(echo "$RESPONSE" | jq '.total')
          echo "TRANSLATE_KO_TOTAL=$TRANSLATE_KO_TOTAL" >> $GITHUB_ENV

      - name: Translate HackerNews to Korean - Flush
        id: translate-ko-flush
        run: |
          for i in {1..5}; do
            RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/flush \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}" \
              -d "{\"type\": \"translate\", \"lang\": \"ko\", \"total\": $TRANSLATE_KO_TOTAL}")
            echo "$RESPONSE"
            FLUSHED=$(echo "$RESPONSE" | jq '.flushed')
            if [ "$FLUSHED" -ge 1 ]; then
              echo "Translate KO flush succeeded!"
              exit 0
            fi
            echo "Translate KO flush not ready, retrying in 60s..."
            sleep 60
          done
          echo "Translate KO flush failed after 5 attempts"
          exit 1

      - name: Translate HackerNews to Japanese
        run: |
          RESPONSE=$(curl -s -X POST "https://mogumogu.dev/api/hackernews/translate?lang=ja" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}")
          echo "$RESPONSE"
          TRANSLATE_JA_TOTAL=$(echo "$RESPONSE" | jq '.total')
          echo "TRANSLATE_JA_TOTAL=$TRANSLATE_JA_TOTAL" >> $GITHUB_ENV
       
      - name: Translate HackerNews to Japanese - Flush
        id: translate-ja-flush
        run: |
          for i in {1..5}; do
            RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/flush \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}" \
              -d "{\"type\": \"translate\", \"lang\": \"ja\", \"total\": $TRANSLATE_JA_TOTAL}")
            echo "$RESPONSE"
            FLUSHED=$(echo "$RESPONSE" | jq '.flushed')
            if [ "$FLUSHED" -ge 1 ]; then
              echo "Translate JA flush succeeded!"
              exit 0
            fi
            echo "Translate JA flush not ready, retrying in 60s..."
            sleep 60
          done
          echo "Translate JA flush failed after 5 attempts"
          exit 1
          
      - name: 🎨 Generate HackerNews image
        run: |
          TODAY=$(date -d '9 hours' +'%y%m%d')
          RESPONSE=$(curl -s -X POST https://mogumogu.dev/api/hackernews/draw/$TODAY \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}")
          echo "$RESPONSE"

      - name: ✅ Final message
        run: echo "All HackerNews tasks completed successfully!"

      - name: Turn off Redis (Fargate)
        if: always()
        run: |
          aws ecs update-service \
            --cluster mogumogu \
            --service mogumogu-service-dr9p94qm \
            --desired-count 0
