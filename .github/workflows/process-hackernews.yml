name: Process HackerNews

on:
  schedule:
    - cron: "00 16 * * *" # KST (UTC+9) 01:00
  workflow_dispatch:

jobs:
  run-tasks:
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ap-northeast-1
      HACKERNEWS_API_KEY: ${{ secrets.HACKERNEWS_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq awscli

      - name: Turn on Redis (Fargate)
        run: |
          aws ecs update-service \
            --cluster mogumogu \
            --service mogumogu-service-dr9p94qm \
            --desired-count 1
          echo "⏳ Waiting for Redis task to start..."
          sleep 30

      - name: Get Redis private IP
        id: get_private_redis_ip
        run: |
          REDIS_IP=$(aws ecs describe-tasks \
            --cluster mogumogu \
            --tasks $(aws ecs list-tasks --cluster mogumogu \
              --service-name mogumogu-service-dr9p94qm \
              --desired-status RUNNING \
              --query 'taskArns[0]' --output text) \
            --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' \
            --output text)
          echo "Redis IP is $REDIS_IP"
          echo "REDIS_HOST=$REDIS_IP" >> $GITHUB_ENV
          echo "REDIS_PORT=6379" >> $GITHUB_ENV

      - name: Get Redis public IP
        id: get_public_redis_ip
        run: |
          TASK_ARN=$(aws ecs list-tasks \
            --cluster mogumogu \
            --service-name mogumogu-service-dr9p94qm \
            --desired-status RUNNING \
            --query 'taskArns[0]' --output text)
          ENI_ID=$(aws ecs describe-tasks \
            --cluster mogumogu \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
          echo "Public IP: $PUBLIC_IP"

      - name: Print Redis env (for debugging)
        run: echo "REDIS_HOST=$REDIS_HOST, REDIS_PORT=$REDIS_PORT"

      - name: Create SSH key file
        run: |
          echo "${{ secrets.AWS_SSH_KEY }}" > /tmp/ci-key.pem
          chmod 600 /tmp/ci-key.pem

      - name: Replace Redis value in .env.prod using Ansible
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/replace-env.yml
          directory: .
          inventory: |
            [web]
            ec2-instance ansible_host=${{ secrets.AWS_EC2_HOST }} ansible_user=ubuntu ansible_ssh_private_key_file=/tmp/ci-key.pem
        env:
          REDIS_HOST: ${{ env.REDIS_HOST }}
          REDIS_PORT: ${{ env.REDIS_PORT }}

      - name: Fetch HackerNews contents list
        run: |
          curl -X POST https://mogumogu.dev/api/hackernews/ \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}"

      - name: Fetch HackerNews contents
        run: |
          curl -X POST https://mogumogu.dev/api/hackernews/fetch/ \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}"

      - name: Wait for Fetch to finish (with threshold)
        run: |
          THRESHOLD=40
          for i in {1..60}; do
            COUNTS_JSON=$(curl -s https://mogumogu.dev/api/hackernews/counts)
            echo "$COUNTS_JSON"
            nullContentCount=$(echo $COUNTS_JSON | jq '.counts.nullContentCount')
            if [ "$nullContentCount" -le "$THRESHOLD" ]; then
              echo "Fetching done with $nullContentCount left (threshold=$THRESHOLD)"
              break
            fi
            echo "Waiting fetch... ($i/60) (nullContentCount=$nullContentCount)"
            sleep 10
          done

      - name: Summarize HackerNews content
        run: |
          curl -X POST https://mogumogu.dev/api/hackernews/summarize/ \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}"

      - name: Wait for Summarize to finish
        run: |
          for i in {1..60}; do
            COUNTS_JSON=$(curl -s https://mogumogu.dev/api/hackernews/counts)
            echo "$COUNTS_JSON"
            nullContentCount=$(echo $COUNTS_JSON | jq '.counts.nullContentCount')
            nullSummaryEnCount=$(echo $COUNTS_JSON | jq '.counts.nullSummaryEnCount')
            if [ "$nullSummaryEnCount" -eq "$nullContentCount" ]; then
              echo "Summarization complete! (nullSummaryEnCount == nullContentCount == $nullContentCount)"
              break
            fi
            echo "Waiting summarize... ($i/60) (nullSummaryEnCount=$nullSummaryEnCount, nullContentCount=$nullContentCount)"
            sleep 10
          done

      - name: Translate HackerNews to Korean
        run: |
          curl -X POST "https://mogumogu.dev/api/hackernews/translate?lang=ko" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}"

      - name: Wait for KO Translate to finish
        run: |
          for i in {1..60}; do
            COUNTS_JSON=$(curl -s https://mogumogu.dev/api/hackernews/counts)
            echo "$COUNTS_JSON"
            nullContentCount=$(echo $COUNTS_JSON | jq '.counts.nullContentCount')
            nullSummaryKoCount=$(echo $COUNTS_JSON | jq '.counts.nullSummaryKoCount')
            if [ "$nullSummaryKoCount" -eq "$nullContentCount" ]; then
              echo "Korean translation complete! (nullSummaryKoCount == nullContentCount == $nullContentCount)"
              break
            fi
            echo "Waiting ko translation... ($i/60) (nullSummaryKoCount=$nullSummaryKoCount, nullContentCount=$nullContentCount)"
            sleep 10
          done

      - name: Translate HackerNews to Japanese
        run: |
          curl -X POST "https://mogumogu.dev/api/hackernews/translate?lang=ja" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}"

      - name: Wait for JA Translate to finish
        run: |
          for i in {1..60}; do
            COUNTS_JSON=$(curl -s https://mogumogu.dev/api/hackernews/counts)
            echo "$COUNTS_JSON"
            nullContentCount=$(echo $COUNTS_JSON | jq '.counts.nullContentCount')
            nullSummaryJaCount=$(echo $COUNTS_JSON | jq '.counts.nullSummaryJaCount')
            if [ "$nullSummaryJaCount" -eq "$nullContentCount" ]; then
              echo "Japanese translation complete! (nullSummaryJaCount == nullContentCount == $nullContentCount)"
              break
            fi
            echo "Waiting ja translation... ($i/60) (nullSummaryJaCount=$nullSummaryJaCount, nullContentCount=$nullContentCount)"
            sleep 10
          done            

      - name: 🎨 Generate HackerNews image
        run: |
          TODAY=$(date -d '9 hours' +'%y%m%d')
          curl -X POST https://mogumogu.dev/api/hackernews/draw/$TODAY/ \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.HACKERNEWS_API_KEY }}"

      - name: ✅ Final message
        run: echo "All HackerNews tasks completed successfully!"

      - name: Turn off Redis (Fargate)
        if: always()
        run: |
          aws ecs update-service \
            --cluster mogumogu \
            --service mogumogu-service-dr9p94qm \
            --desired-count 0
