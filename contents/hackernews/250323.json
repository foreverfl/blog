[
  {
    "id": "3f187cff992325c8",
    "title": {
      "en": "NixOS and reproducible builds could have detected the xz backdoor",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://luj.fr/blog/how-nixos-could-have-detected-xz.html",
    "score": 173,
    "by": "birdculture",
    "time": 1742672399,
    "content": "How NixOS and reproducible builds could have detected the xz backdoor\nfor the benefit of all\n\n            Published on 2025-03-20\n\n            Estimated reading time: 22mn\n\n            Introduction\nIn March 2024, a backdoor was discovered in xz, a (de)-compression software that is regularly used at the core of Linux distributions to unpack source tarballs of packaged software. The backdoor had been covertly inserted by a malicious maintainer under the pseudonym of Jia Tan over a period of three years. This event deeply stunned the open source community as the attack was both of massive impact (it allowed remote code execution on all affected machines that had ssh installed) and extremely difficult to detect. In fact, it was only thanks to the diligence (and maybe luck) of Andres Freund – a Postgres developer working at Microsoft – that the catastrophe was avoided: while investigating a seemingly unrelated 500ms performance regression in ssh that he was experiencing on several Debian unstable machines, he was able to trace it back to the liblzma library, identify the backdoor and document it.\nWhile it was already established that the open source supply chain was often the target of malicious actors, what is stunning is the amount of energy invested by Jia Tan to gain the trust of the maintainer of the xz project, acquire push access to the repository and then among other perfectly legitimate contributions insert – piece by piece – the code for a very sophisticated and obfuscated backdoor. This should be a wake up call for the OSS community. We should consider the open source supply chain a high value target for powerful threat actors, and to collectively find countermeasures against such attacks.\nIn this article, I’ll discuss the inner workings of the xz backdoor and how I think we could have mechanically detected it thanks to build reproducibility.\nHow does the attack work?\nThe main intent of the backdoor is to allow for remote code execution on the target by hijacking the ssh program. To do that, it replaces the behavior of some of ssh’s functions (most importantly the RSA_public_decrypt one) in order to allow an attacker to execute arbitrary commands on a victim’s machine when some specific RSA key is used to log in. Two main pieces are combined to put together to install and activate the backdoor:\n\nA script to de-obfuscate and install a malicious object file as part of the xz build process.\nInterestingly the backdoor was not comprehensively contained in the source code for xz. Instead, the malicious components were only contained in tarballs built and signed by the malicious maintainer Jia Tan and published alongside releases 5.6.0 and 5.6.1 of xz. This time the additional release tarball contained slight and disguised modifications to extract a malicious object file from the .xz files used as data for some test contained in the repository.\nA procedure to hook the RSA_public_decrypt function. The backdoor uses the ifunc mechanism of glibc to modify the address of the RSA_public_function when ssh is loaded, in case ssh links against liblzma through libsystemd.\n\n  Info\n\n  The rest of this section goes into the details of the two steps mentionned. Reading it is not necessary to understand the rest of the article. The most important takeaway here is that the backdoor was only active when using the maintainer-provided release tarball.\n\n1. A script to de-obfuscate and install a malicious object file as part of the xz build process\nAs explained above, the malicious object file is stored directly in the xz git repository, hidden in some test files. The project being a decompression software, test cases include .xz files to be decompressed, making it possible to hide some machine code into fake test files;\nThe backdoor is not active in the code contained in the git repository, it is only included by building xz from the tarball released by the project, which has a few differences with the actual contents of the repository, most importantly in the m4/build-to-host.m4 file.\ndiff --git a/m4/build-to-host.m4 b/m4/build-to-host.m4\nindex f928e9ab..d5ec3153 100644\n--- a/m4/build-to-host.m4\n+++ b/m4/build-to-host.m4\n@@ -1,4 +1,4 @@\n-# build-to-host.m4 serial 3\n+# build-to-host.m4 serial 30\n dnl Copyright (C) 2023-2024 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n dnl gives unlimited permission to copy and/or distribute it,\n@@ -37,6 +37,7 @@ AC_DEFUN([gl_BUILD_TO_HOST],\n\n   dnl Define somedir_c.\n   gl_final_[$1]=\"$[$1]\"\n+  gl_[$1]_prefix=`echo $gl_am_configmake | sed \"s/.*\\.//g\"`\n   dnl Translate it from build syntax to host syntax.\n   case \"$build_os\" in\n     cygwin*)\n@@ -58,14 +59,40 @@ AC_DEFUN([gl_BUILD_TO_HOST],\n   if test \"$[$1]_c_make\" = '\\\"'\"${gl_final_[$1]}\"'\\\"'; then\n     [$1]_c_make='\\\"$([$1])\\\"'\n   fi\n+  if test \"x$gl_am_configmake\" != \"x\"; then\n+    gl_[$1]_config='sed \\\"r\\n\\\" $gl_am_configmake | eval $gl_path_map | $gl_[$1]_prefix -d 2>/dev/null'\n+  else\n+    gl_[$1]_config=''\n+  fi\n+  _LT_TAGDECL([], [gl_path_map], [2])dnl\n+  _LT_TAGDECL([], [gl_[$1]_prefix], [2])dnl\n+  _LT_TAGDECL([], [gl_am_configmake], [2])dnl\n+  _LT_TAGDECL([], [[$1]_c_make], [2])dnl\n+  _LT_TAGDECL([], [gl_[$1]_config], [2])dnl\n   AC_SUBST([$1_c_make])\n+\n+  dnl If the host conversion code has been placed in $gl_config_gt,\n+  dnl instead of duplicating it all over again into config.status,\n+  dnl then we will have config.status run $gl_config_gt later, so it\n+  dnl needs to know what name is stored there:\n+  AC_CONFIG_COMMANDS([build-to-host], [eval $gl_config_gt | $SHELL 2>/dev/null], [gl_config_gt=\"eval \\$gl_[$1]_config\"])\n ])\n\n dnl Some initializations for gl_BUILD_TO_HOST.\n AC_DEFUN([gl_BUILD_TO_HOST_INIT],\n [\n+  dnl Search for Automake-defined pkg* macros, in the order\n+  dnl listed in the Automake 1.10a+ documentation.\n+  gl_am_configmake=`grep -aErls \"#{4}[[:alnum:]]{5}#{4}$\" $srcdir/ 2>/dev/null`\n+  if test -n \"$gl_am_configmake\"; then\n+    HAVE_PKG_CONFIGMAKE=1\n+  else\n+    HAVE_PKG_CONFIGMAKE=0\n+  fi\n+\n   gl_sed_double_backslashes='s/\\\\/\\\\\\\\/g'\n   gl_sed_escape_doublequotes='s/\"/\\\\\"/g'\n+  gl_path_map='tr \"\\t \\-_\" \" \\t_\\-\"'\n changequote(,)dnl\n   gl_sed_escape_for_make_1=\"s,\\\\([ \\\"&'();<>\\\\\\\\\\`|]\\\\),\\\\\\\\\\\\1,g\"\n changequote([,])dnl\n\nWhile these changes may look benign to the naive eyes and well commented, they are actually hiding a chain of commands that decrypts/deobfuscates several fake .xz test files to ultimately produce two files:\n\na shell script that is run during the build of xz ;\na malicious binary object file.\n\nThere is an excellent analysis from Russ Cox that explains in detail how these two malicious resources are produced during the build process, and I advise any interested reader to find all relevant details there.\nThe shell script run during the build has two main purposes:\n\nVerifying that the conditions to execute the backdoor are met on the builder (the backdoor targets specific Linux distributions, needs specific features of the glibc activated, needs ssh installed, etc) ;\nModifying the (legitimate) liblzma_la-crc64_fast.o to use the _get_cpuid symbol defined in the backdoor object file.\n\n2. A procedure to hook the RSA_public_decrypt function\nSo how does a backdoor in the xz executable have any effect on ssh?\nTo understand that, we have to take a little detour in the realm of dynamic loaders and dynamically linked programs. Whenever a program depends on a library, there are two ways that library can be linked into the final executable:\n\nstatically, in that case the library is embedded into the final executable, hence increasing its size ;\ndynamically, in which case it is the role of the dynamic loader (ld-linux.so in Linux) to find that shared library when the program starts and load it in memory.\n\nWhen a program is compiled using dynamic linking, the addresses of the symbols belonging to dynamically linked libraries cannot be provided at compilation time: their position in memory is not know ahead of time! Instead, a reference to the Global Offset Table (or GOT) is inserted. When the program is started, the actual addresses are filled in the GOT by the dynamic linker.\nThe xz backdoor uses a functionality of the glibc called ifunc to force execution of code during dynamic loading time: ifunc is designed to allow selection between several implementations of the same function at dynamic loading time.\n#include <stdio.h>\n\n// Declaration of ifunc resolver function\nint (*resolve_add(void))(int, int);\n\n// First version of the add function\nint add_v1(int a, int b) {\n    printf(\"Using add_v1\\n\");\n    return a + b;\n}\n\n// Second version of the add function\nint add_v2(int a, int b) {\n    printf(\"Using add_v2\\n\");\n    return a + b;\n}\n\n// Resolver function that chooses the correct version of the function\nint (*resolve_add(void))(int, int) {\n    // You can implement any runtime check here.\n    // In that case we check if the system is 64bit\n    if (sizeof(void*) == 8) {\n        return add_v2;\n    } else {\n        return add_v1;\n    }\n}\n\n// Define the ifunc attribute for the add function\nint add(int a, int b) __attribute__((ifunc(\"resolve_add\")));\n\nint main() {\n    int result = add(10, 20);\n    printf(\"Result: %d\\n\", result);\n    return 0;\n}\n\nIn the above example, the ifunc attribute surrounding the add function indicates that the version that will be executed will be determined at dynamic loading time by running the resolve_add function. In that case, the resolve_add function returns add_v1 or add_v2 depending if the running system is a 64 bit system or not – and as such is completely harmless – but this technique is used by the xz backdoor to run some malicious code at dynamic loading time.\nBut dynamic loading of which program? Well, of ssh! In some Linux distributions (Debian and Fedora for example), ssh is patched to support systemd notifications and for this purpose, links with libsystemd, that in turn links with liblzma. In those distribution sshd hence has a transitive dependency on liblzma.\n\nDependency chain between sshd and liblzma\n\nThis is how the backdoor works: whenever sshd is executed, the dynamic loader loads libsystemd and then liblzma. With the backdoor installed, and leveraging the ifunc functionality as explained above, the backdoor is able to run arbitrary code when liblzma is being loaded. Indeed, as you remember from the previous section, the backdoor script modifies one of the legitimate xz object files: it actually modifies the resolver of one of the functions that uses ifunc to call its own malicious _get_cpuid symbol. When called, this function meddles with the GOT (that is not yet read-only at this time of execution) to modify the address of the RSA_public_decrypt function, replacing it by a malicious one! That’s it, at this point sshd uses the malicious RSA_public_decrypt function that gives RCE privileges to the attacker.\nOnce again, there exist more precise reports on exactly how the hooking happens that a curious reader might read, like this one for example. There is also a research article summarizing the attack vector and possible mitigations that I recommend reading.\nAvoiding the xz catastrophe in the future\nWhat should our takeaways be from this near-miss and what should we do to minimize the risks of such an attack happening again in the future? Obviously, there is a lot to be said about the social issues at play here1 and how we can build better resilience in the OSS ecosystem against malicious entities taking over really fundamental OSS projects, but in this piece I’ll only address the technical aspects of the question.\nPeople are often convinced that OSS is more trustworthy than closed-source software because the code can be audited by practitioners and security professionals in order to detect vulnerabilities or backdoors. In this instance, this procedure has been made difficult by the fact that part of the code activating the backdoor was not included in the sources available within the git repository but was instead present in the maintainer-provided tarball. While this was used to hide the backdoor out of sight of most investigating eyes, this is also an opportunity for us to improve our software supply chain security processes.\nBuilding software from trusted sources\nOne immediate observation that we can make in reaction to this supply chain incident is that it was only effective because a lot of distributions were using the maintainer provided tarball to build xz instead of the raw source code supplied by the git forge (in this case, GitHub). This reliance on release tarballs has plenty of historical and practical reasons:\n\nthe tarball workflow predates the existence of git and was used in the earliest Linux distributions;\ntarballs are self-contained archives that encapsulate the exact state of the source code intended for release while git repositories can be altered, creating the need for a snapshot of the code;\ntarballs can contain intermediary artifacts (for example manpages) used to lighten the build process, or configure scripts to target specific hardware, etc;\ntarballs allow the source code to be compressed which is useful for space efficiency.\n\nThis being said, these reasons do not weigh enough in my opinion to justify the security risks they create. In all places where it is technically feasible, we should build software from sources authenticated by the most trustworthy party. For example, if a project is developed on GitHub, an archive is automatically generated by GitHub for each release. The risk of a compromise of that release archive is far lower than the risk of a malicious maintainer distributing unfaithful tarballs, as it would require compromising the GitHub infrastructure (and at this point the problem is much more serious). This reasoning can be extended in all cases where the development is happening on a platform operated by a trusted third party like Codeberg/SourceHut/Gitlab, etc.\nWhen the situation allows it…\nNixOS is a distribution built on the functional package management model, that is to say every package is encoded as an expression written in Nix, a functional programming language. A Nix expression for a software project is usually a function mapping all the project dependencies to a “build recipe” that can be later executed to build the package. I am a NixOS developer and I was surprised when the backdoor was revealed to see that the malicious version of xz had ended up being distributed to our users2. While there is no policy about this, there is a culture among NixOS maintainers of using the source archive automatically generated by GitHub (that are simply snapshots of the source code) when available through the fetchFromGitHub function. In the simplified example of the xz package below, you can see that the sources for the package are actually extracted from the manually uploaded malicious maintainer provided tarball through another source fetcher: fetchurl.\n{ lib, stdenv, fetchurl\n, enableStatic ? stdenv.hostPlatform.isStatic\n}:\n\nstdenv.mkDerivation rec {\n  pname = \"xz\";\n  version = \"5.6.0\";\n\n  src = fetchurl {\n    url = \"https://github.com/tukaani-project/xz/releases/download/v${version}/xz-${version}.tar.xz\";\n    hash = \"sha256-AWGCxwu1x8nrNGUDDjp/a6ol4XsOjAr+kncuYCGEPOI=\";\n  };\n...\n}\n\nTo understand why, we must first talk about the bootstrap of nixpkgs. The concept of a bootstrap is the idea that one could rebuild all of the packages in nixpkgs from a small set of seed binaries. This is an important security property because it means that there are no other external tools that one must trust in order to trust the toolchain that is used to build the software distribution. What we call the “bootstrap” in the context of a software distribution like nixpkgs, is all the steps needed to build the basic compilation environment to be used by other packages, called stdenv in nixpkgs. Building stdenv is not an easy task; how does one build gcc when one doesn’t even have a C compiler? The answer is that you start from a very small binary that does nothing fancy but is enough to build hex, a minimalist assembler, which in turn can build a more complex assembler, and this until we are able to build more complex software and finally a modern C compiler. The bootstraping story of Nix/Guix is an incredibly interesting topic, that I will not cover extensively here, but I strongly advise reading blog posts from the Guix community, that are on the bleeding edge (they have introduced a 357-byte bootstrap that is being adapted for nixpkgs).\nWhat does all that has to do with xz though? Well, xz is included in the nixpkgs bootstrap!\n$ nix-build -A stdenv\n/nix/store/91d27rjqlhkzx7mhzxrir1jcr40nyc7p-stdenv-linux\n$ nix-store --query --graph result\n\nWe can see now that stdenv depends at runtime on xz, so it is indeed built during the bootstrap stage. To understand a bit more why this is the case, I’ll also generate a graph of the software in stdenv that depends on xz at buildtime.\n$ nix-store --query --graph $(nix-eval --raw -f default stdenv.drvPath)\n\nWe can see that several packages depend on xz. Let’s take coreutils for example and try to understand why it depends on xz by reading its derivation file, which is the intermediary representation of the build process obtained by evaluating the Nix expression for coreutils:\n{\n  \"/nix/store/57hlz5fnvfgljivf7p18fmcl1yp6d29z-coreutils-9.5.drv\": {\n    \"args\": [\n      \"-e\",\n      \"/nix/store/v6x3cs394jgqfbi0a42pam708flxaphh-default-builder.sh\"\n    ],\n    \"builder\": \"/nix/store/razasrvdg7ckplfmvdxv4ia3wbayr94s-bootstrap-tools/bin/bash\",\n\n      ...\n\n    \"inputDrvs\": {\n\n      ...\n\n      \"/nix/store/c0wk92pcxbxi7579xws6bj12mrim1av6-xz-5.6.2.drv\": {\n        \"dynamicOutputs\": {},\n        \"outputs\": [\n          \"bin\"\n        ]\n      },\n      \"/nix/store/xv4333kfggq3zn065a3pwrj7ddbs4vzg-coreutils-9.5.tar.xz.drv\": {\n        \"dynamicOutputs\": {},\n        \"outputs\": [\n          \"out\"\n        ]\n      }\n    },\n\n    ...\n\n    \"system\": \"x86_64-linux\"\n  }\n}\n\nThe inputDrvs field here correspond to all the other packages or expressions that the coreutils build process depends on. We see that in particular it depends on two components:\n\n/nix/store/c0wk92pcxbxi7579xws6bj12mrim1av6-xz-5.6.2.drv, which is xz itself;\n/nix/store/xv4333kfggq3zn065a3pwrj7ddbs4vzg-coreutils-9.5.tar.xz.drv which is a source archive for coreutils! As it is a .xz archive, we need xz to unpack it and that is where the dependency comes from!\n\nThe same reasoning applies to the other three direct dependencies that we could see in the graph earlier.\nxz being built as part of the bootstrap means it doesn’t have access to all the facilities normal packages in nixpkgs can rely on. In particular it can only access packages that are built before in bootstrap. For example, to build xz from sources, we need autoconf to generate the configure script. But autoconf has a dependency on xz! Using the maintainer tarball allows us to break this dependency cycle.\n$ nix why-depends --derivation nixpkgs#autoconf nixpkgs#xz\n/nix/store/2rajzdx3wkivlc38fyhj0avyp10k2vjj-autoconf-2.72.drv\n└───/nix/store/jnnb5ihdh6r3idmqrj2ha95ir42icafq-stdenv-linux.drv\n    └───/nix/store/sqwqnilfwkw6p2f5gaj6n1xlsy054fnw-xz-5.6.4.drv\n\nIn conclusion, at the point in the nixpkgs graph where the xz package is built, the GitHub source archive cannot be used and we have to rely on the maintainer provided tarball, and hence, trust it. That does not mean that further verification cannot be implemented in nixpkgs, though…\nBuilding trust into untrusted release tarballs\nTo recap, the main reason that made NixOS vulnerable to the xz attack is that it is built as part of the bootstrap phase, at a point where we rely on maintainer-provided tarballs instead of the ones generated by GitHub. This incident shows that we should have specific protections in place, to ensure software built as part of our bootstrap is trustworthy.\n1. By comparing sources\nOne idea that comes to mind is that it should be easy, as a distribution, to verify that the sources tarballs we are using are indeed identical to the GitHub ones. There was even a pull request opened to introduce such a protection scheme. While this seem like a natural idea, it doesn’t really work in practice: it’s not that rare that the maintainer provided tarball differs from the sources, and it’s often nothing to worry about.\n\nAs Daniel Stenberg (the maintainer of curl) explains, the release tarball being different than the source is a feature: it allows the maintainer to include intermediary artifacts like manpages or configure scripts for example (this is especially useful for distributions that want to get rid of the dependency on autoconf to build the program). Of course when we care about software supply chain security, this flexibility that project maintainers have in the way they provide the release assets is actually a liability because it forces us to trust them to do it honestly.\n2. Leveraging bitwise reproducibility\nReproducible builds is a property of a software project that is verified if building it twice in the same conditions yields the exact same (bitwise identical) artifacts. Build reproducibility is not something easy to obtain, as there are all kinds of nondeterminisms that can happen in build processes, and making as many packages as possible reproducible is the purpose of the reproducible-builds group. It is also a property recognized as instrumental to increase the trust in the distribution of binary artifacts (see Reproducible Builds: Increasing the Integrity of Software Supply Chains for a detailed report).\nThere are several ways bitwise reproducibility could be used to build up trust in untrusted maintainer provided tarballs:\n\nReproducibly building the tarball\nA first approach that has been adopted by the postgresql project is to make the tarball generation process reproducible. This allows any user (or a linux distribution) to independently verify that the maintainer provided tarball was honestly generated from the original source code.\n\nWith this method, you can keep some advantages of building from tarballs (including the tarball containing some intermediary build artifacts like manpages or configure scripts). However, the drawback of this approach for software supply chain security is that it has to be implemented by upstream project maintainers. This means that adoption of this kind of security feature will probably be slow in the FOSS community, and while it is a good practice to make everything reproducible, including the tarball generation process, this is not the most effective way to increase software supply chain security today.\nChecking for build convergence between various starting assets\n\n  Info\n\n  This part is about how I think NixOS could have detected the xz attack even though xz is built as part of the NixOS bootstrap phase.\n\nAssuming xz is bitwise reproducible (and that is indeed the case), and that the maintainer provided tarball doesn’t contain any modification that impacts the build process, building it from the GitHub tarball or from the maintainer provided tarball should produce the same artifacts, right? Based on this idea, my proposal is to build xz a second time after the bootstrap, this time using the GitHub tarball (which is only possible after the bootstrap). If both builds differ we can suspect that there a suspicion of a supply chain compromise.\n\nSummary of the method I propose to detect vulnerable xz source tarballs\n\nLet’s see how this could be implemented:\nFirst, we rewrite the xz package, this time using the fetchFromGitHub function. I create a after-boostrap.nix file alongside the original xz expression in the pkgs/tools/compression/xz directory of nixpkgs:\n  {\n  lib,\n  stdenv,\n  fetchurl,\n  enableStatic ? false,\n  writeScript,\n  fetchFromGitHub,\n  testers,\n  gettext,\n  autoconf,\n  libtool,\n  automake,\n  perl538Packages,\n  doxygen,\n  xz,\n}:\n\nstdenv.mkDerivation (finalAttrs: {\n  pname = \"xz\";\n  version = \"5.6.1\";\n\n  src = fetchFromGitHub {\n    owner = \"tukaani-project\";\n    repo = \"xz\";\n    rev = \"v${finalAttrs.version}\";\n    hash = \"sha256-alrSXZ0KWVlti6crmdxf/qMdrvZsY5yigcV9j6GIZ6c=\";\n  };\n\n  strictDeps = true;\n  configureFlags = lib.optional enableStatic \"--disable-shared\";\n  enableParallelBuilding = true;\n  doCheck = true;\n\n  nativeBuildInputs = [\n    gettext\n    autoconf\n    libtool\n    automake\n    perl538Packages.Po4a\n    doxygen\n    perl\n  ];\n\n  preConfigure = ''\n    ./autogen.sh\n  '';\n\n})\n\nI removed details here to focus on the most important: the Nix expression is very similar to the actual derivation for xz, the only difference (apart from the method to fetch the source) is that we need to use autoconf to generate configure scripts. When using the maintainer provided tarball these are already pre-generated for us (as Daniel Stenberg was explaining in the toot above) – which is very handy particularly when you are building xz in the bootstrap phase of a distribution and you don’t want a dependency on autoconf / automake – but in this instance we have to do it ourselves.\nNow that we can build xz from the code archive provided by GitHub, we have to write Nix code to compare both outputs. For that purpose, we register a new phase called compareArtifacts, that runs at the very end of the build process. To make my point, I’ll first only compare the liblzma.so file (the one that was modified by the backdoor), but we could easily generalize this phase to all binaries and libraries outputs:\npostPhases = [ \"compareArtifacts\" ];\n\ncompareArtifacts = ''\n  diff $out/lib/liblzma.so ${xz.out}/lib/liblzma.so\n'';\n\nAfter this change, building xz-after-bootstrap on master3 still works, showing that in a normal setting, both artifacts are indeed identical.\n$ nix-build -A xz-after-bootstrap\n/nix/store/h23rfcjxbp1vqmmbvxkv0f69r579kfc1-xz-5.6.1\n\nLet’s now try our detection method on the backdoored xz and see what happens! We checkout revision c53bbe3 that contains the said version4, and build xz-after-bootstrap.\n$ git checkout c53bbe3\n$ nix-build -A xz-after-boostrap\n/nix/store/57p62d3m98s2bgma5hcz12b4vv6nhijn-xz-5.6.1\n\nAgain, identical artifacts? Remember that the backdoor was not active in NixOS, partly because there is a check that the RPM_ARCH variable is set in the script that installs the backdoor. So let’s set it in pkgs/tools/compression/xz/default.nix to activate the backdoor5.\nenv.RPM_ARCH = true;\n\n$ nix-build -A xz-after-boostrap\n/nix/store/57p62d3m98s2bgma5hcz12b4vv6nhijn-xz-5.6.1\n...\n...\nRunning phase: compareBins\nBinary files /nix/store/cxz8iq3hx65krsyraill6figp03dk54n-xz-5.6.1/lib/liblzma.so and /nix/store/4qp2khyb22hg6a3jiy4hqmasjinfkp2g-xz-5.6.1/lib/liblzma.so differ\n\nThat’s it, binary artifacts are different now! Let’s try to understand a bit more what makes them different by keeping them as part of the output. For that, we modify the compareArtifacts phase:\ncompareArtifacts = ''\n  cp ${xz.out}/lib/liblzma.so $out/xzBootstrap\n  cp $out/lib/liblzma.so $out/xzAfterBootstrap\n  diff $out/lib/liblzma.so ${xz.out}/lib/liblzma.so || true\n'';\n\nThis time the diff doesn’t make the build fail and we store both versions of the liblzma.so to be able to compare them afterwards.\n$ ls -lah result\ntotal 69M\ndr-xr-xr-x      6 root root     99 Jan  1  1970 .\ndrwxrwxr-t 365666 root nixbld  85M Dec 10 14:27 ..\ndr-xr-xr-x      2 root root   4.0K Jan  1  1970 bin\ndr-xr-xr-x      3 root root     32 Jan  1  1970 include\ndr-xr-xr-x      3 root root    103 Jan  1  1970 lib\ndr-xr-xr-x      4 root root     31 Jan  1  1970 share\n-r-xr-xr-x      1 root root   210K Jan  1  1970 xzAfterBootstrap\n-r-xr-xr-x      1 root root   258K Jan  1  1970 xzBootstrap\n\nWe can notice that there is even a significant size difference between the two artifacts with an increase of 48Kb for the backdoored one. Let’s try to understand where this difference comes from. We can use the nm command from binutils to list the symbols in an artifact:\n$ nm result/xzAfterBootstrap\n000000000000d3b0 t alone_decode\n000000000000d380 t alone_decoder_end\n000000000000d240 t alone_decoder_memconfig\n0000000000008cc0 t alone_encode\n0000000000008c90 t alone_encoder_end\n0000000000008db0 t alone_encoder_init\n0000000000020a80 t arm64_code\n0000000000020810 t arm_code\n0000000000020910 t armthumb_code\n000000000000d8d0 t auto_decode\n000000000000d8a0 t auto_decoder_end\n000000000000d730 t auto_decoder_get_check\n000000000000d7a0 t auto_decoder_init\n000000000000d750 t auto_decoder_memconfig\n0000000000022850 r available_checks.1\n00000000000225f0 r bcj_optmap\n0000000000008fb0 t block_buffer_encode\n...\n\nNow we can diff the symbols between the two artifacts:\n$ diff -u0 <(nm --format=just-symbols xzAfterBootstrap) <(nm --format=just-symbols xzBootstrap)\n--- /dev/fd/63\t2024-12-10 15:27:11.477332683 +0000\n+++ /dev/fd/62\t2024-12-10 15:27:11.478332717 +0000\n@@ -31,0 +32 @@\n+_cpuid\n@@ -65,0 +67 @@\n+_get_cpuid\n@@ -448,0 +451 @@\n+__tls_get_addr@GLIBC_2.3\n\nTADA! We see the added _get_cpuid symbol, documented in numerous technical report about the xz backdoor, confirming our method works!\nAddendum 1: How to implement this safeguard in nixpkgs?\nI think nixpkgs should implement this kind of safeguard for every package built as part of the bootstrap phase that is not using a trusted source archive. The *-after-bootstrap packages could then be added to the channel blockers to ensure that there is big red alarm that requires intervention from the maintainers if ever one of those would not build.\nAs a proof of concept, and to gather the feedback of the community I opened a pull request in the nixpkgs repository for the xz case, but if the method is adopted we should then implement it for the other candidate packages in nixpkgs’s bootstrap.\nAddendum 2: Evaluation: reproducibility of stdenv over time\nAs discussed above, the method I propose assumes the packages we want to build trust in are bitwise reproducible. In order to help validate the approach, let’s verify that the packages belonging to the stdenv runtime are indeed reproducible.\nTo do that, I have (as part of a bigger research project whose findings are summarized in another blog post) sampled 17 nixpkgs-unstable revisions from 2017 to 2023 and rebuilt every non-fixed-output-derivation (FOD) composing stdenv from these revisions using the nix-build --check command to check for bitwise reproducibility.\nHere are my findings:\n\nIn every revision xz was bitwise reproducible ;\nIn 12 of the 17 revisions there was either one or two packages that were buildable but not reproducible, but those packages are consistent over time: for example gcc has consistently been non reproducible from 2017 to 2021 and bash until 2019.\n\nThese findings, while showing that this method cannot be applied to every package in stdenv, are encouraging: even if some packages are not bitwise reproducible, they are consistently so, which means that it should be possible to selectively activate it on packages that exhibit good reproducibility in the long term.\nAddendum 3: Limitations: the trusting trust issue\nThe trusting trust issue is a famous thought experiment initiated by Ken Thomson during his Turing award acceptance lecture. The idea is the following: assume there is a backdoor in compilers we use to build our software such that the compiler propagates the backdoor to all new version of itself that it builds, but behaves normally for any other build until some point in time where it backdoors all executables it produces. Moderns compilers often need a previous version of themselves to be compiled so there must be an initial executable that we have to trust to build our software, making this kind of sophisticated attack theoretically possible and completely undetectable.\nSimilarly, the method I am proposing here requires to make the assumption that the untrusted xz (the one built during the bootstrap phase) can’t indirectly corrupt the build of xz-after-bootstrap to make it look like the produced artifacts are identical. Again, such an attack would probably be extremely complex to craft so the assumption here seems sane.\n\nThanks\nI would like to thank Théo Zimmermann, Pol Dellaiera, Martin Schwaighofer, and Stefano Zacchiroli for their valuable feedback and insightful discussions during the writing of this blog post. Their contributions significantly helped me organize and refine my ideas on this topic.\n\nJia Tan essentially (through multiple identities) pressured the main xz maintainer into accepting new maintainers for the project, claiming that the project was receiving sub-par maintenance.↩︎\nFortunately, even though the malicious version was available to users, the backdoor was not active on NixOS has it was specifically made to target Debian and Fedora systems.↩︎\nTested at the time of writing on revision 1426c51↩︎\nFor obvious reasons, the backdoored tarball has been deleted from GitHub and the project’s website but it is still available in the NixOS cache!↩︎\nThis illustrates the power and limitation of this method: it only detects modifications of the tarball that have an impact on the final result. In the case of the xz backdoor, NixOS executables did not contain the backdoor and as such without any modification we would not have discovered the backdoor. So yes, the title is a little bit catchy, but illustrates the idea.↩︎",
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "6bf5f1d4fb0b83cb",
    "title": {
      "en": "Map Features in OpenStreetMap with Computer Vision",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://blog.mozilla.ai/map-features-in-openstreetmap-with-computer-vision/",
    "score": 185,
    "by": "Brysonbw",
    "time": 1742665330,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "09e9f98019f60115",
    "title": {
      "en": "PyTorch Internals: Ezyang's Blog",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://blog.ezyang.com/2019/05/pytorch-internals/",
    "score": 269,
    "by": "Anon84",
    "time": 1742654344,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "bfd23bb5d8d8073e",
    "title": {
      "en": "Tencent's 'Hunyuan-T1'–The First Mamba-Powered Ultra-Large Model",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://llm.hunyuan.tencent.com/#/blog/hy-t1?lang=en",
    "score": 145,
    "by": "marban",
    "time": 1742664332,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "9de1101d0d490e83",
    "title": {
      "en": "Mathematical Methods for Physics [pdf]",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.ma.imperial.ac.uk/~dturaev/Mathematical_Methods2021.pdf",
    "score": 68,
    "by": "ibobev",
    "time": 1742673532,
    "content": "ok",
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "3f8268237786294b",
    "title": {
      "en": "The polar vortex is hitting the brakes",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.climate.gov/news-features/blogs/polar-vortex/polar-vortex-hitting-brakes",
    "score": 174,
    "by": "bryanrasmussen",
    "time": 1742671898,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "99e9a4ff0d6d0812",
    "title": {
      "en": "Landrun: Sandbox any Linux process using Landlock, no root or containers",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/Zouuup/landrun",
    "score": 253,
    "by": "Zoup",
    "time": 1742651819,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "f0278c8dffc99c32",
    "title": {
      "en": "Through a Glass Lushly: Michalina Janoszanka's Reverse Paintings (Ca. 1920s)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://publicdomainreview.org/collection/michalina-janoszanka/",
    "score": 15,
    "by": "prismatic",
    "time": 1742418939,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "358527fe6882b6b9",
    "title": {
      "en": "Domu Technology Inc. (YC S24) Is Hiring a Vibe Coder",
      "ko": null,
      "ja": null
    },
    "type": "job",
    "url": "https://www.ycombinator.com/companies/domu-technology-inc/jobs/hwWsGdU-vibe-coder-ai-engineer",
    "score": 1,
    "by": "Nicoding27",
    "time": 1742691612,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "1e51268ed4d16a02",
    "title": {
      "en": "Quitting an Intel x86 Hypervisor",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://halobates.de/blog/p/446",
    "score": 44,
    "by": "todsacerdoti",
    "time": 1742676124,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2bfa44bc1d84798a",
    "title": {
      "en": "Trapping misbehaving bots in an AI Labyrinth",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://blog.cloudflare.com/ai-labyrinth/",
    "score": 114,
    "by": "pabs3",
    "time": 1742391067,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "d0bcffad54b657d9",
    "title": {
      "en": "Differential Geometry: A First Course in Curves and Surfaces [pdf]",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://math.franklin.uga.edu/sites/default/files/users/user317/ShifrinDiffGeo.pdf",
    "score": 113,
    "by": "ibobev",
    "time": 1742651190,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "27b2b887ce228a79",
    "title": {
      "en": "Magical Instant Bullets",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://militaryrealism.blog/2025/03/20/magical-instant-bullets/",
    "score": 36,
    "by": "baud147258",
    "time": 1742507720,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "af6f19d8a0fd65d6",
    "title": {
      "en": "300-year-old Polish beech voted Tree of the Year",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.bbc.co.uk/news/articles/c20dd6yk55yo",
    "score": 41,
    "by": "n1b0m",
    "time": 1742416678,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "11859a6c056f214a",
    "title": {
      "en": "The Vectrex Computer",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.amigalove.com/viewtopic.php?t=2887",
    "score": 39,
    "by": "erickhill",
    "time": 1742683941,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "a96318bdaefb2545",
    "title": {
      "en": "Optimizing Brainfuck interpreter in the C preprocessor",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/camel-cdr/bfcpp",
    "score": 21,
    "by": "namanyayg",
    "time": 1742510047,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "c3b6789ceb3c102a",
    "title": {
      "en": "Show HN: FastOpenAPI – automated docs for many Python frameworks",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/mr-fatalyst/fastopenapi",
    "score": 109,
    "by": "mr_Fatalyst",
    "time": 1742652630,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "29d209b338460f29",
    "title": {
      "en": "Paul A. M. Dirac, Interview by Friedrich Hund (1982) [video]",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.youtube.com/watch?v=xJzrU38pGWc",
    "score": 86,
    "by": "mdp2021",
    "time": 1742657448,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "7ebe6c4ba0f90ac6",
    "title": {
      "en": "Derivatives and Logarithms of 3D Transforms",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://nosferalatu.com/./DerivativesLogarithmsTransforms.html",
    "score": 33,
    "by": "nosferalatu123",
    "time": 1742515596,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "3b71d292b6cc3d6b",
    "title": {
      "en": "California Attorney General issues consumer alert for 23andMe customers",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://oag.ca.gov/news/press-releases/attorney-general-bonta-urgently-issues-consumer-alert-23andme-customers",
    "score": 290,
    "by": "thoughtpeddler",
    "time": 1742666138,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2a9c1e6024029864",
    "title": {
      "en": "Bra and KET: String Interpolation in AmigaDOS",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.datagubbe.se/braket/",
    "score": 48,
    "by": "ingve",
    "time": 1742663122,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "869d40a09904001e",
    "title": {
      "en": "Crabtime: Zig’s Comptime in Rust",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://crates.io/crates/crabtime",
    "score": 393,
    "by": "klaussilveira",
    "time": 1742409851,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "bb7728a51670dda3",
    "title": {
      "en": "Show HN: We made an MCP server so Cursor can debug Node.js on its own",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.npmjs.com/package/@hyperdrive-eng/mcp-nodejs-debugger",
    "score": 61,
    "by": "arthurgousset",
    "time": 1742659046,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2faa9e49893d33b8",
    "title": {
      "en": "Understanding R1-Zero-Like Training: A Critical Perspective",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/sail-sg/understand-r1-zero",
    "score": 99,
    "by": "pama",
    "time": 1742654112,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "34680cd787affb42",
    "title": {
      "en": "Scallop – A Language for Neurosymbolic Programming",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.scallop-lang.org/",
    "score": 190,
    "by": "andsoitis",
    "time": 1742618708,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "877cfaddbe3399f5",
    "title": {
      "en": "Hubble Captures Vivid Auroras in Jupiter's Atmosphere (2016)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://science.nasa.gov/missions/hubble/hubble-captures-vivid-auroras-in-jupiters-atmosphere/",
    "score": 45,
    "by": "mooreds",
    "time": 1742426968,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "338962ecabfcc9a6",
    "title": {
      "en": "When you deleted /lib on Linux while still connected via SSH (2022)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://tinyhack.com/2022/09/16/when-you-deleted-lib-on-linux-while-still-connected-via-ssh/",
    "score": 128,
    "by": "todsacerdoti",
    "time": 1742628245,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "79d3b9dd2357223c",
    "title": {
      "en": "Blue Ghost lander captures sunset shots on moon before falling silent",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://phys.org/news/2025-03-blue-ghost-lander-captures-stunning.html",
    "score": 69,
    "by": "pseudolus",
    "time": 1742381137,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "e2aca39a1f826fca",
    "title": {
      "en": "Italy demands Google poison DNS under strict Piracy Shield law",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://arstechnica.com/gadgets/2025/03/italian-court-orders-google-to-block-iptv-pirate-sites-at-dns-level/",
    "score": 127,
    "by": "DanAtC",
    "time": 1742672764,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2852f55e961e65fa",
    "title": {
      "en": "Next.js version 15.2.3 has been released to address a security vulnerability",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://nextjs.org/blog/cve-2025-29927",
    "score": 120,
    "by": "makepanic",
    "time": 1742678347,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "ba85cdd2931b74b2",
    "title": {
      "en": "IETF setting standards for AI preferences",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.ietf.org/blog/aipref-wg/",
    "score": 27,
    "by": "Mithriil",
    "time": 1742650221,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "726b90c4eed19c94",
    "title": {
      "en": "EU confirms Apple can make a portless iPhone without USB-C",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://9to5mac.com/2025/03/19/eu-confirms-apple-can-make-a-portless-iphone-without-usb-c/",
    "score": 17,
    "by": "ksec",
    "time": 1742389603,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "d209cefdecea71a4",
    "title": {
      "en": "Monster Cables picked the wrong guy to threaten (2008)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.oncontracts.com/monster-cables-picked-the-wrong-guy-to-threaten/",
    "score": 513,
    "by": "wallflower",
    "time": 1742603437,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "7a0fca0fc8e6db74",
    "title": {
      "en": "Safe Shell String Interpolation",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://samwing.dev/posts/zJonlrXabVoc",
    "score": 15,
    "by": "Wingy",
    "time": 1742665045,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2927e58e39ce09ff",
    "title": {
      "en": "Frink",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://frinklang.org/",
    "score": 204,
    "by": "lisper",
    "time": 1742585957,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "a289ba8566d52c12",
    "title": {
      "en": "'Naive' science fan faces jail for plutonium import",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://au.news.yahoo.com/naive-science-fan-faces-jail-053025281.html",
    "score": 17,
    "by": "geox",
    "time": 1742687196,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "37cdc755902b21bc",
    "title": {
      "en": "France rejects backdoor mandate",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.eff.org/deeplinks/2025/03/win-encryption-france-rejects-backdoor-mandate",
    "score": 940,
    "by": "hn_acker",
    "time": 1742589311,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "98594b6648724a35",
    "title": {
      "en": "CEO of Kubient sentenced for fraud",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://arstechnica.com/gadgets/2025/03/ceo-of-ai-ad-tech-firm-pledging-world-free-of-fraud-sentenced-for-fraud/",
    "score": 149,
    "by": "pseudolus",
    "time": 1742677360,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "cf48a834519f255b",
    "title": {
      "en": "Don't Be Afraid of Types",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://lmika.org/2025/03/18/dont-be-afraid-of-types.html",
    "score": 104,
    "by": "speckx",
    "time": 1742323980,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "ed5d15f12be2c53a",
    "title": {
      "en": "Locks, leases, fencing tokens, FizzBee",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://surfingcomplexity.blog/2025/03/03/locks-leases-fencing-tokens-fizzbee/",
    "score": 42,
    "by": "azhenley",
    "time": 1742335006,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "c9d4c74469cb3d9b",
    "title": {
      "en": "The Cybernetic Teammate",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.oneusefulthing.org/p/the-cybernetic-teammate",
    "score": 31,
    "by": "tobr",
    "time": 1742647947,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "28804a3277d35500",
    "title": {
      "en": "Making the Arithmometer Count",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.mhs.ox.ac.uk/staff/saj/arithmometer/",
    "score": 9,
    "by": "gene-h",
    "time": 1742392955,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "137daba2ec570893",
    "title": {
      "en": "Older editions of which books were better than the new ones?",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://mathoverflow.net/questions/29710/older-editions-of-which-books-were-better-than-the-new-ones",
    "score": 6,
    "by": "susam",
    "time": 1742678499,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "98e60ae8c2214936",
    "title": {
      "en": "Math for Computer Science and Machine Learning [pdf]",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.cis.upenn.edu/~jean/math-deep.pdf",
    "score": 39,
    "by": "ibobev",
    "time": 1742636557,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "22d55cc5566c84c7",
    "title": {
      "en": "Show HN: A terminal emulator in pure PHP",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/soloterm/screen",
    "score": 182,
    "by": "aarondf",
    "time": 1742579005,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "8b7b54a1406f7565",
    "title": {
      "en": "Most AI value will come from broad automation, not from R&D",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://epoch.ai/gradient-updates/most-ai-value-will-come-from-broad-automation-not-from-r-d",
    "score": 80,
    "by": "ydnyshhh",
    "time": 1742668500,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "9e0fba41c956e10b",
    "title": {
      "en": "Pen and Paper Exercises in Machine Learning (2022)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://arxiv.org/abs/2206.13446",
    "score": 394,
    "by": "ibobev",
    "time": 1742587632,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "60e5facc16b537eb",
    "title": {
      "en": "I want a good parallel computer",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://raphlinus.github.io/gpu/2025/03/21/good-parallel-computer.html",
    "score": 190,
    "by": "raphlinus",
    "time": 1742586942,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "caf646d9cc67a1a6",
    "title": {
      "en": "There's no emotion we ought to think harder about than anger",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://aeon.co/essays/there-s-no-emotion-we-ought-to-think-harder-about-than-anger",
    "score": 45,
    "by": "privong",
    "time": 1742675507,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "0f9ecfa7eec46811",
    "title": {
      "en": "Unofficial Windows 7 Service Pack 2",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/i486girl/win7-sp2",
    "score": 27,
    "by": "XzetaU8",
    "time": 1742643903,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "feb73d0638f074a2",
    "title": {
      "en": "Ancient DNA Shows Stone Age Europeans Voyaged by Sea to Africa",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.nature.com/articles/d41586-025-00764-2",
    "score": 113,
    "by": "gmays",
    "time": 1742494980,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "6bc5028df4e5f69a",
    "title": {
      "en": "Facebook to stop targeting ads at UK woman after legal fight",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.bbc.co.uk/news/articles/c1en1yjv4dpo",
    "score": 126,
    "by": "dijksterhuis",
    "time": 1742660568,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "a46cfad92e25d229",
    "title": {
      "en": "IronRDP: a Rust implementation of Microsoft's RDP protocol",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/Devolutions/IronRDP",
    "score": 513,
    "by": "mikece",
    "time": 1742571327,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "f23b54230c88f0e0",
    "title": {
      "en": "Programmer vs. Developer: 1 in 4 programming jobs have vanished",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.msn.com/en-us/money/careers/1-in-4-programming-jobs-have-vanished-what-happened/ar-AA1AUumu",
    "score": 8,
    "by": "jnord",
    "time": 1742684886,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "87c562eca48f4e1f",
    "title": {
      "en": "43-year-old Family Canoe Trip",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://paddlingmag.com/stories/features/legendary-43-year-family-canoe-story/",
    "score": 91,
    "by": "cameron_b",
    "time": 1742299581,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "5e2295e89b87ee44",
    "title": {
      "en": "Blogging like it's 1987: A blog post from my old text terminal",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://pointinthecloud.com/2025-03-15-190000.html",
    "score": 5,
    "by": "ftvkyo",
    "time": 1742672033,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "530d84be27c89db3",
    "title": {
      "en": "Mathup: Easy MathML authoring tool with a quick to write syntax",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://mathup.xyz/",
    "score": 118,
    "by": "runarberg",
    "time": 1742576537,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "5871a04c53f991bc",
    "title": {
      "en": "Cake is watching you: I built a camera cake",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://medium.com/@hazalmestci/interact-with-your-cake-and-eat-it-too-24d25da25017",
    "score": 48,
    "by": "hazalmestci",
    "time": 1742406299,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "80d26d5aa7eee205",
    "title": {
      "en": "Chunking Attacks on File Backup Services Using Content-Deﬁned Chunking [pdf]",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.daemonology.net/blog/chunking-attacks.pdf",
    "score": 115,
    "by": "cperciva",
    "time": 1742578234,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "ee58c3e73bfc3e13",
    "title": {
      "en": "'Eggflation' sending US shoppers to Mexico – where $300 fines await",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.theguardian.com/us-news/2025/mar/21/eggflation-us-mexico-fines",
    "score": 35,
    "by": "paulpauper",
    "time": 1742670820,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "6de557499066e0d5",
    "title": {
      "en": "Show HN: AGX – Open-Source Data Exploration for ClickHouse (The New Standard?)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/agnosticeng/agx",
    "score": 44,
    "by": "didierfranc",
    "time": 1742395874,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "95cb9bc8cf450a2f",
    "title": {
      "en": "Use Long Options in Scripts",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://matklad.github.io/2025/03/21/use-long-options-in-scripts.html",
    "score": 262,
    "by": "OptionOfT",
    "time": 1742587020,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "8cd333a959895658",
    "title": {
      "en": "MySQL transactions per second vs. fsyncs per second (2020)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://sirupsen.com/napkin/problem-10-mysql-transactions-per-second",
    "score": 109,
    "by": "jcartw",
    "time": 1742591919,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "cdda3cb35982651b",
    "title": {
      "en": "George Foreman has died",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://variety.com/2025/tv/news/george-foreman-boxer-infomercial-star-dies-1236345523/",
    "score": 305,
    "by": "wallflower",
    "time": 1742612169,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "17c46cd9ab091ed5",
    "title": {
      "en": "The Humans Building AI Scientists",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.asimov.press/p/futurehouse",
    "score": 65,
    "by": "surprisetalk",
    "time": 1742432818,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "848c8869a89758eb",
    "title": {
      "en": "Horror on the coast of Oaxaca, a tourist paradise plagued by mass disappearances",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://english.elpais.com/international/2025-03-10/horror-on-the-coast-of-oaxaca-a-tourist-paradise-plagued-by-mass-disappearances.html",
    "score": 42,
    "by": "PaulHoule",
    "time": 1742666607,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "9201e0b343cae4fe",
    "title": {
      "en": "‘The Celts: A Modern History’ by Ian Stewart Review",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.historytoday.com/archive/review/celts-modern-history-ian-stewart-review",
    "score": 102,
    "by": "lermontov",
    "time": 1742537284,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "d51f7e766c5883db",
    "title": {
      "en": "Even the worst mass extinction had its oases",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://arstechnica.com/science/2025/03/even-the-worst-mass-extinction-had-its-oases/",
    "score": 95,
    "by": "Hooke",
    "time": 1742361693,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "465b9edbf784649a",
    "title": {
      "en": "Claude can now search the web",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.anthropic.com/news/web-search",
    "score": 1187,
    "by": "meetpateltech",
    "time": 1742489472,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "b37da0c384f5a905",
    "title": {
      "en": "Lock Contention",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://maksimkita.com/blog/lock-contention.html",
    "score": 88,
    "by": "stacyz",
    "time": 1742230028,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "0fbffb74d4f0c43b",
    "title": {
      "en": "Global population datasets underrepresent rural population",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.nature.com/articles/s41467-025-56906-7",
    "score": 205,
    "by": "croes",
    "time": 1742298638,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "c98f733cb68ba2b2",
    "title": {
      "en": "London's Heathrow Airport announces complete shutdown due to power outage",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.cnn.com/2025/03/20/travel/london-heathrow-airport-shut-intl-hnk/index.html",
    "score": 229,
    "by": "dfine",
    "time": 1742527866,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "dfb083fd35bf1670",
    "title": {
      "en": "Amazon wants a product safety regulator declared unconstitutional",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.washingtonpost.com/technology/2025/03/21/amazon-product-safety-regulators-trump/",
    "score": 148,
    "by": "danorama",
    "time": 1742655369,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "c09f02b3a91d146e",
    "title": {
      "en": "‘Bluey’s World’: How a Cute Aussie Puppy Became a Juggernaut",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.hollywoodreporter.com/tv/tv-features/blueys-world-success-puppy-juggernaut-1236164905/",
    "score": 335,
    "by": "adrian_mrd",
    "time": 1742386486,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "43e25f70b2789624",
    "title": {
      "en": "Career Development: What It Means to Be a Manager, Director, or VP (2015)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://kellblog.com/2015/03/08/career-development-what-it-really-means-to-be-a-manager-director-or-vp/",
    "score": 509,
    "by": "AnhTho_FR",
    "time": 1742554181,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "b244e987b5b3bb1d",
    "title": {
      "en": "Graydon Carter's Wild Ride Through the Golden Age of Magazines",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.newyorker.com/magazine/2025/03/24/when-the-going-was-good-graydon-carter-book-review",
    "score": 14,
    "by": "samclemens",
    "time": 1742440623,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "43ebc5dacf39cb98",
    "title": {
      "en": "New USPTO Memo Makes Fighting Patent Trolls Even Harder",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.eff.org/deeplinks/2025/03/new-uspto-memo-makes-fighting-patent-trolls-even-harder",
    "score": 296,
    "by": "healsdata",
    "time": 1742583333,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "99cbbb3c673748f1",
    "title": {
      "en": "StarVector: Generating Scalable Vector Graphics Code from Images and Text",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://starvector.github.io/",
    "score": 34,
    "by": "lnyan",
    "time": 1742610357,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2f1b7353f0c9203c",
    "title": {
      "en": "A Dyson Swarm Made of Solar Panels Would Make Earth Uninhabitable",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.universetoday.com/articles/a-dyson-swarm-made-of-solar-panels-would-make-earth-uninhabitable",
    "score": 15,
    "by": "nobody9999",
    "time": 1742679465,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "15dd50f604234d73",
    "title": {
      "en": "Wheel Reinventor’s Principles (2024)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://tobloef.com/blog/wheel-reinventors-principles/",
    "score": 208,
    "by": "TobLoef",
    "time": 1742559405,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2c164bc012f84125",
    "title": {
      "en": "France hits hydrogen jackpot: largest reserve valued $92B found",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://interestingengineering.com/energy/france-worlds-largest-hydrogen-deposit",
    "score": 52,
    "by": "j_maffe",
    "time": 1742648831,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "c13bf0830405a1b3",
    "title": {
      "en": "“Vibe Coding” vs. Reality",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://cendyne.dev/posts/2025-03-19-vibe-coding-vs-reality.html",
    "score": 183,
    "by": "birdculture",
    "time": 1742675751,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "2b17c3b7b0af698f",
    "title": {
      "en": "Raspberry Pi: rpi-image-gen",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.raspberrypi.com/news/introducing-rpi-image-gen-build-highly-customised-raspberry-pi-software-images/",
    "score": 12,
    "by": "aduffy",
    "time": 1742675487,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "4ef86df9914d8ed3",
    "title": {
      "en": "Liberapay",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://en.liberapay.com/",
    "score": 340,
    "by": "nanna",
    "time": 1742300472,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "e44736f087491b6a",
    "title": {
      "en": "Manifest: A 1-file micro-back end",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/mnfst/manifest",
    "score": 94,
    "by": "andrewshadura",
    "time": 1742292941,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "abe61af7f266c42a",
    "title": {
      "en": "DNA evidence says first Americans came from Asia",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://factsanddetails.com/world/cat56/sub361/entry-8944.html",
    "score": 76,
    "by": "axiologist",
    "time": 1742508868,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "9edf6993d22da2f3",
    "title": {
      "en": "The Case for Centralizing Authorization",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.aserto.com/blog/the-case-for-centralizing-authorization",
    "score": 34,
    "by": "mooreds",
    "time": 1742304017,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "0f11a27fee1f9fd4",
    "title": {
      "en": "Bootstrap C projects without the pain",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/claeusdev/pricc",
    "score": 9,
    "by": "claeusdev",
    "time": 1742638036,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "d6bb492b59d5a400",
    "title": {
      "en": "Numbering should start at zero (1982)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.cs.utexas.edu/~EWD/transcriptions/EWD08xx/EWD831.html",
    "score": 103,
    "by": "checkyoursudo",
    "time": 1742549733,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "ab8a990f1ca06468",
    "title": {
      "en": "Napkin Math Tool",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://taylor.town/napkin-math",
    "score": 131,
    "by": "surprisetalk",
    "time": 1742224563,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "b923d95d74513bf8",
    "title": {
      "en": "Export Predefined Regions in Krita",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://github.com/aldanasjuan/krita_export_region",
    "score": 25,
    "by": "noisycarlos",
    "time": 1742491380,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "bfaa7281ec987c04",
    "title": {
      "en": "The New Three-Tier Application",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.dbos.dev/blog/new-three-tier-application",
    "score": 67,
    "by": "qianli_cs",
    "time": 1742303075,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "e1758e0adb4e9a6b",
    "title": {
      "en": "Specializing Python with E-Graphs",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://vectorfold.studio/blog/egglog",
    "score": 61,
    "by": "dtseng123",
    "time": 1742302720,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "58de9e23dbdde759",
    "title": {
      "en": "The Cult of the American Lawn",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.noemamag.com/the-cult-of-the-american-lawn/",
    "score": 54,
    "by": "ecliptik",
    "time": 1742571493,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "120a17d363f0ec34",
    "title": {
      "en": "The Burnout Machine",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://unionize.fyi",
    "score": 777,
    "by": "flxfxp",
    "time": 1742495057,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "b23eeabac05f440a",
    "title": {
      "en": "Cyberlibertarianism: The Right-Wing Politics of Digital Technology",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.jstor.org/stable/10.5749/jj.14308236",
    "score": 18,
    "by": "doener",
    "time": 1742626967,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "5f1f764c1a0fca70",
    "title": {
      "en": "Researcher uses AI to make texts that are thousands of years old readable (2023)",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://phys.org/news/2023-02-ai-texts-thousands-years-readable.html",
    "score": 37,
    "by": "mooreds",
    "time": 1742345947,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "6c8efc4f5fa340b0",
    "title": {
      "en": "In some parts of the US, the clack of typewriter keys can still be heard",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.bbc.com/future/article/20250321-the-people-who-still-use-typewriters",
    "score": 6,
    "by": "Geekette",
    "time": 1742682308,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "18b509e2a99eb61d",
    "title": {
      "en": "How a Gag Order Made 'Careless People' a Bestseller",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://www.vulture.com/article/careless-people-sarah-wynn-williams-facebook-gag-order.html",
    "score": 30,
    "by": "herbertl",
    "time": 1742653075,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  },
  {
    "id": "d538177b8059be72",
    "title": {
      "en": "The Frontend Treadmill",
      "ko": null,
      "ja": null
    },
    "type": "story",
    "url": "https://polotek.net/posts/the-frontend-treadmill/",
    "score": 726,
    "by": "Kerrick",
    "time": 1742473531,
    "content": null,
    "summary": {
      "en": null,
      "ko": null,
      "ja": null
    }
  }
]