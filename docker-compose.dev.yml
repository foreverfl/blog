services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_R2_URI: ${NEXT_PUBLIC_R2_URI:-http://localhost:8080}
        NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-}
        SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN:-}
    container_name: blog-dev
    ports:
      - "3000:3000"
    env_file:
      - .env.local
    environment:
      - NODE_ENV=development
      - ENV_STAGE=dev
      # Local overrides for database connections
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mogumogu
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://user:password@postgres:5432/mogumogu
      - SENTRY_ENVIRONMENT=development
    volumes:
      # 소스코드를 마운트하여 hot-reload 지원
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - redis
      - postgres
    networks:
      - blog-network
    command: npm run dev

  # Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --save 60 1 --loglevel warning
    networks:
      - blog-network

  # Redis Insight
  redis-insight:
    image: redis/redisinsight:latest
    container_name: redis-insight
    ports:
      - "5540:5540"
    depends_on:
      - redis
    volumes:
      - redisinsight_data:/data
    networks:
      - blog-network

  # PostgreSQL
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: mogumogu
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - blog-network

volumes:
  redis_data:
  redisinsight_data:
  postgres_data:

networks:
  blog-network:
    driver: bridge
